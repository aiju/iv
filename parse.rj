/* true for implemented keywords */
bool kwtab[string] = {
	"always": true, "and": false, "assign": true, 
	"automatic": false, "begin": true, "buf": false, "bufif0": false, 
	"bufif1": false, "case": true, "casex": true, "casez": true, 
	"cell": false, "cmos": false, "config": false, "deassign": false, 
	"default": true, "defparam": false, "design": false, "disable": false, 
	"edge": false, "else": true, "end": true, "endcase": true, 
	"endconfig": false, "endfunction": false, "endgenerate": false, "endmodule": true, 
	"endprimitive": false, "endspecify": false, "endtable": false, "endtask": false, 
	"event": true, "for": true, "force": false, "forever": true, 
	"fork": false, "function": false, "generate": true, "genvar": true, 
	"highz0": false, "highz1": false, "if": true, "ifnone": false, 
	"incdir": false, "include": false, "initial": true, "inout": true, 
	"input": true, "instance": false, "integer": false, "join": false, 
	"large": false, "liblist": false, "library": false, "localparam": true, 
	"macromodule": false, "medium": false, "module": true, "nand": false, 
	"negedge": true, "nmos": false, "nor": false, "noshowcancelled": false, 
	"not": false, "notif0": false, "notif1": false, "or": false, 
	"output": true, "parameter": true, "pmos": false, "posedge": true, 
	"primitive": false, "pull0": false, "pull1": false, "pulldown": false, 
	"pullup": false, "pulsestyle_ondetect": false, "pulsestyle_onevent": false, "rcmos": false, 
	"real": true, "realtime": true, "reg": true, "release": false, 
	"repeat": true, "rnmos": false, "rpmos": false, "rtran": false, 
	"rtranif0": false, "rtranif1": false, "scalared": false, "showcancelled": false, 
	"signed": true, "small": false, "specify": false, "specparam": false, 
	"strong0": false, "strong1": false, "supply0": false, "supply1": false, 
	"table": false, "task": false, "time": true, "tran": false, 
	"tranif0": false, "tranif1": false, "tri": false, "tri0": false, 
	"tri1": false, "triand": false, "trior": false, "trireg": false, 
	"unsigned1": false, "use": false, "uwire": false, "vectored": false, 
	"wait": false, "wand": false, "weak0": false, "weak1": false, 
	"while": true, "wire": true, "wor": false, "xnor": false, 
	"xor": false
};

struct Parser {
	string s;
	int idx;
	int lineno;
	Token peektok;
	Scope global;
	Scope scope;
	Token nextnum;
	string str;
	Symbol curmod;
};

function
Parser(s)
{
	this.str = s;
	this.idx = 0;
	this.lineno = 1;
	this.peektok = null;
	this.global = new Scope(null, null);
	this.scope = this.global;
	this.nextnum = null;
}

Symbol
getsym(Scope scope, string name, bool hier)
{
	Scope sc;
	Symbol s;
	
	if(hier)
		for(sc = scope; sc !== null; sc = sc.up)
			if(sc.tab[name] !== undefined && sc.tab[name].t !== null)
				return sc.tab[name];
	s = scope.tab[name];
	if(s === undefined)
		s = scope.tab[name] = new Symbol(scope, name);
	return s;
}

void
Parser.newscope(Symbol sym)
{
	this.scope = new Scope(this.scope, sym);
}

void
Parser.scopeup()
{
	this.scope = this.scope.up;
}

Symbol
decl(int lineno, Scope scope, SymbolType t, Symbol s, Type typ, Node def)
{
	s = getsym(scope, s.name, false);
	if(s.t !== SYMNONE)
		error(lineno, "'" + (string)s + "' redeclared");
	s.t = t;
	s.def = def;
	s.type = typ;
	s.lineno = lineno;
	s.scope = scope;
	return s;
}

VError errors[] = [];

VError
error(int line, string str)
{
	VError e = new VError(line, str);
	errors.push(e);
	return e;
}

string
Parser.getc()
{
	string c;
	
	c = this.str.charAt(this.idx++);
	if(c == "\n") this.lineno++;
	return c;
}

void
Parser.ungetc()
{
	if(this.str.charAt(--this.idx) == "\n")
		this.lineno--;
}

bool
isspace(string s)
{
	return s == " " || s == "\t" || s == "\n";
}

bool
isdigit(string s)
{
	return s >= "0" && s <= "9";
}

bool
isident(string s)
{
	return s >= "A" && s <= "Z" || s >= "a" && s <= "z" || s >= "0" && s <= "9" || s == "_" || s == "$";
}

Bits
decconv(int lno, string s)
{
	string digs, p;
	Bits r, ten;
	int i;

	r = new Bits("");
	ten = new Bits("01010");
	digs = "00000 10000 01000 11000 00100 10100 01100 11100 00010 10010";
	for(i = 0; i < s.length; i++){
		p = s.charAt(i);
		if(p < "0" || p > "9"){
			error(lno, "invalid character '" + p + "' in decimal number");
			return new Bits("x");
		}
		r = mpmul(r, ten);
		r = mpadd(r, new Bits(digs.substr((s.charCodeAt(i) - 48) * 6, 5)));
	}
	return r;
}

Const
numparse(int lno, Token a, Token b, Token c)
{
	string r, digs;
	int i, p;
	Bits rr;

	if(b == null)
		b = Token{base: 10, sign: true};
	switch(b.base){
	case 2:
		r = "";
		for(i = 0; i < c.str.length; i++){
			p = "01xXzZ?".indexOf(c.str[i]);
			if(p < 0){
				error(lno, "invalid character '" + c.str[i] + "' in binary number");
				r = "x";
				break;
			}
			r = "01xXzZ?"[p] + r;
		}
		if("01".indexOf(c.str[0]) >= 0)
			r = r + "0";
		break;
	case 8:
		digs = "000 100 010 110 001 101 110 111 xxx xxx zzz zzz zzz";
		r = "";
		for(i = 0; i < c.str.length; i++){
			p = "01234567xXzZ?".indexOf(c.str[i]);
			if(p < 0){
				error(lno, "invalid character '" + c.str[i] + "' in octal number");
				r = "x";
				break;
			}
			r = digs.substr(p * 4, 3) + r;
		}
		if("01234567".indexOf(c.str[0]) >= 0)
			r = r + "0";
		break;
	case 10:
		if(c.str.length == 1 && (i = "xXzZ?".indexOf(c.str)) >= 0)
			r = "xxzzz"[i];
		else
			r = decconv(lno, c.str).s;
		break;
	case 16:
		digs = "0000 1000 0100 1100 0010 1010 1100 1110 0001 1001 0101 1101 0011 1011 0111 1111 xxxx zzzz zzzz";
		r = "";
		for(i = 0; i < c.str.length; i++){
			p = "0123456789abcdefxz?".indexOf(c.str[i].toLowerCase());
			if(p < 0){
				error(lno, "invalid character '" + c.str[i] + "' in hexadecimal number");
				r = "x";
				break;
			}
			r = digs.substr(p * 5, 4) + r;
		}
		if("xz".indexOf(r[r.length - 1]) < 0)
			r = r + "0";
		break;
	
	default:
		error(lno, "unimplemented base " + b.base.toString());
		r = "x";
	}
	rr = new Bits(r);
	if(a !== null){
		p = parseInt(a.str, 10);
		rr = rr.trunc(p, b.sign);
	}else
		p = -1;
	return new Const(rr, p, b.sign);
}

string longop[string] = {
	"!=": "!=",
	"!==": "!==",
	"&&": "&&",
	"**": "**",
	"<<": "<<",
	"<<<": "<<<",
	"<=": "<=",
	"==": "==",
	"===": "===",
	">=": ">=",
	">>": ">>",
	">>>": ">>>",
	"^~": "~^",
	"||": "||",
	"~&": "~&",
	"~^": "~^",
	"~|": "~|",
	"@*": "@*",
};
bool opchar[string] = {
	"!": true,
	"&": true,
	"*": true,
	"<": true,
	"=": true,
	">": true,
	"^": true,
	"|": true,
	"~": true
};

Token
Parser.lex()
{
	string c, s, r;
	int i;
	Token t;
	
	if(this.peektok !== null){
		t = this.peektok;
		this.peektok = null;
		return t;
	}
	again: for(;;){
		do{
			c = this.getc();
		}while(isspace(c));
		if(c == "") return Token{t: "EOF"};
		if(c == "/"){
			c = this.getc();
			if(c == "/"){
				while(c = this.getc(), c != "" && c != "\n");
					;
				continue again;
			}else if(c == "*"){
				do{
					while(c = this.getc(), c != "" && c != "*")
						;
					while(c == "*")
						c = this.getc();
				}while(c != "" && c != "/");
				continue again;
			}else{
				this.ungetc();
				return Token{t: "/"};
			}
		}
		if(c == "\""){
			s = "";
			while(c = this.getc(), c != "\""){
				if(c == "\n"){
					error(this.lineno, "nl in string");
					break;
				}
				if(c == ""){
					error(this.lineno, "eof in string");
					break;
				}
				if(c == "\\")
					switch(c = this.getc()){
					case "n": s += "\n"; break;
					case "t": s += "\t"; break;
					default:
						if(isdigit(c)){
							r = "";
							i = 0;
							do
								r += c;
							while(++i < 3 && (c = this.getc(), isdigit(c)));
							if(i < 3){
								this.ungetc();
								s += "\\" + r;
							}else
								s += String.fromCharCode(parseInt(r, 8));
						}else
							s += c;
					}
				else
					s += c;
			}
			return Token{t: "str", str: s};
		}
		if(c == "\\"){
			s = "";
			while(c = this.getc(), c != "" && !isspace(c))
				s += c;
			return Token{t: "id", sym: getsym(this.scope, s, true)};
		}
		if(isdigit(c) || this.nextnum && (isident(c) || c == "?")){
			s = c;
			if(s == "_") s = "";
			while(c = this.getc(), isident(c) || c == "?")
				if(c != "_")
					s += c;
			this.ungetc();
			this.nextnum = null;
			return Token{t: "num", str: s};
		}
		if(isident(c)){
			s = c;
			while(c = this.getc(), isident(c))
				s += c;
			this.ungetc();
			switch(kwtab[s]){
			case true:
				return Token{t: "kw:" + s};
			case false:
				throw error(this.lineno, "unsupported keyword '" + s + "'");
				return Token{t: "kw:" + s};
			}
			return Token{t: "id", sym: getsym(this.scope, s, true)};
		}
		if(c == "'"){
			s = c;
			c = this.getc();
			if(c == "s" || c == "S"){
				s += c;
				c = this.getc();
			}
			if("bodhBODH".indexOf(c) >= 0)
				s += c;
			else
				this.ungetc();
			return this.nextnum = Token{t: "base", base: {"b": 2, "B": 2, "o": 8, "O": 8, "d": 10, "D": 10, "h": 16, "H": 16}[c], sign: s[1] == "s" || s[1] == "S"};
		}
		if(opchar[c]){
			s = c;
			while(c = this.getc(), c != "" && longop[s + c] !== undefined)
				s += c;
			this.ungetc();
			return Token{t: longop[s] || s};
		}
		return Token{t: c};
	}
}

void
Parser.superman(Token t)
{
	if(this.peektok !== null)
		throw "This is not Superman IV";
	this.peektok = t;
}

Token
Parser.peek()
{
	if(this.peektok !== null)
		return this.peektok;
	return this.peektok = this.lex();
}

Token
Parser.expect(string tt)
{
	Token t;
	
	t = this.peek();
	if(t.t !== tt){
		error(this.lineno, "expected " + tt + ", got " + t.t);
		return null;
	}
	this.lex();
	return t;
}

Token
Parser.expectany(bool tt[string])
{
	Token t;
	string s, i;
	bool first;
	
	t = this.peek();
	if(tt[t.t] !== true){
		s = "expected ";
		first = true;
		for(i in tt){
			if(!first) s += " or ";
			else first = false;
			s += i;
		}
		error(this.lineno, s + ", got " + t.t);
		return null;
	}
	this.lex();
	return t;
}

Token
Parser.got(string tt)
{
	if(this.peek().t === tt)
		return this.lex();
	return null;
}

Token
Parser.goteof(string tt)
{
	string t;
	
	t = this.peek().t;
	if(t === tt)
		return this.lex();
	if(t == "EOF")
		throw error(this.lineno, "unexpected EOF");
	return null;
}

Token
Parser.gotany(bool tt[string])
{
	if(tt[this.peek().t] === true)
		return this.lex();
	return null;
}

void
Parser.p_attributes()
{
}

Node
Parser.p_range()[]
{
	Node a, b;

	if(this.got("[") === null)
		return null;
	a = this.p_expr();
	this.expect(":");
	b = this.p_expr();
	this.expect("]");
	return [a, b];
}

Symbol
Parser.p_port_declaration()
{
	string dir;
	bool wire;
	bool signed;
	Node range[];
	Symbol sym;
	Token tok;
	Type t;

	this.p_attributes();
	tok = this.expectany({"kw:input": true, "kw:output": true, "kw:inout": true});
	if(tok !== null)
		dir = tok.t.substr(3);
	else
		dir = "input";
	tok = this.expectany({"kw:wire": true, "kw:reg": true});
	wire = tok !== null && tok.t == "kw:wire";
	signed = this.got("kw:signed") !== null;
	range = this.p_range();
	sym = this.expect("id").sym;
	if(range === null)
		t = signed ? sbittype : bittype;
	else
		t = new Type(TYPBITV, signed, range[1], range[0], null);
	sym = decl(this.lineno, this.scope, SYMPORT, sym, t, null);
	sym.dir = dir;
	sym.portreg = !wire;
	return sym;
}

Node
Parser.p_delay()
{
	Token t;
	Node n, d;

	if(this.got("#") !== null){
		t = this.expectany({"num": true, "id": true, "(": true});
		switch(t.t){
		case "num":
			d = new Node(Node{t: ASTCINT, numi: parseInt(t.str), lineno: this.lineno});
			break;
		case "id":
			if(t.sym.t == SYMNONE)
				error(this.lineno, "undeclared '" + (string)t.sym + "'");
			d = new Node(Node{t: ASTSYM, sym: t.sym, lineno: this.lineno});
			break;
		case "(":
			n = this.p_expr();
			this.expect(")");
			d = n;
			break;
		}
		return new Node(Node{t: ASTDELAY, n1: d, lineno: d.lineno});
	}
	return null;
}

Node
Parser.p_hier_identifier()
{
	Symbol s;
	Node n;
	
	s = this.expect("id").sym;
	if(s.t == SYMNONE)
		error(this.lineno, "undeclared '" + s.toString() + "'");
	n = new Node(Node{t: ASTSYM, sym: s, lineno: this.lineno});
/*	while(this.got(".") !== null)
		n = new Node(Node{t: "hier", n1: n, n2: this.expect("id").s});*/
	
	return n;
}

Node
Parser.p_lvalue()
{
	Node l[], n, a;
	
	if(this.got("{") !== null){
		l = [this.p_lvalue()];
		while(this.got(",") !== null)
			l.push(this.p_lvalue());
		this.expect("}");
		return new Node(Node{t: ASTCONCAT, l: l, lineno: this.lineno});
	}else{
		n = this.p_hier_identifier();
		while(this.got("[") !== null){
			a = this.p_expr();
			if(this.got(":") !== null)
				n = new Node(Node{t: ASTIDX, n1: n, n2: a, n3: this.p_expr(), lineno: this.lineno});
			else
				n = new Node(Node{t: ASTIDX, n1: n, n2: a, n3: null, lineno: this.lineno});
			this.expect("]");
		}
		return n;
	}
}

OpType untab[string] = {
	"+": OPUPLUS,
	"-": OPUMINUS,
	"!": OPLNOT,
	"~": OPCOM,
	"&": OPRAND,
	"~&": OPRNAND,
	"|": OPROR,
	"~|": OPROR,
	"^": OPRXOR,
	"~^": OPRXNOR
};

Node
Parser.p_primary()
{
	Token t, a, b, c;
	Node n;
	Const cn;

	switch(t = this.lex(), t.t){
	case "id":
		this.superman(t);
		return this.p_hier_identifier();
	case "num":
		b = this.got("base");
		if(b !== null){
			a = t;
			c = this.expect("num");
		}else{
			a = null;
			c = t;
		}
		cn = numparse(this.lineno, a, b, c);
		if(cn.iscint())
			return new Node(Node{t: ASTCINT, numi: cn.v.toInt(), lineno: this.lineno});
		return new Node(Node{t: ASTNUM, num: cn, lineno: this.lineno});
	case "base":
		b = t;
		c = this.expect("num");
		cn = numparse(this.lineno, null, b, c);
		if(cn.iscint())
			return new Node(Node{t: ASTCINT, numi: cn.v.toInt(), lineno: this.lineno});
		return new Node(Node{t: ASTNUM, num: cn, lineno: this.lineno});
	case "(":
		n = this.p_expr();
		this.expect(")");
		return n;
	default:
		if(untab[t.t] !== undefined){
			this.p_attributes();
			return new Node(Node{t: ASTUN, op: untab[t.t], n1: this.p_primary(), lineno: this.lineno});
		}
		throw error(this.lineno, "unexpected " + t.t + " in expression");
		return null;
	}
}

OpType tok2op[string] = {
	"**": OPEXP,
	"*": OPMUL,
	"/": OPDIV,
	"%": OPMOD,
	"+": OPADD,
	"-": OPSUB,
	"<<": OPLSL,
	">>": OPLSR,
	"<<<": OPASL,
	">>>": OPASR,
	"<": OPLT,
	"<=": OPLE,
	">": OPGT,
	">=": OPGE,
	"==": OPEQ,
	"!=": OPNEQ,
	"===": OPEQS,
	"!==": OPNEQS,
	"&": OPAND,
	"^": OPXOR,
	"~^": OPXNOR,
	"|": OPOR,
	"&&": OPLAND,
	"||": OPLOR,
};

int prectab[OpType] = {
	OPEXP: 11,
	OPMUL: 10,
	OPDIV: 10,
	OPMOD: 10,
	OPADD: 9,
	OPSUB: 9,
	OPLSL: 8,
	OPLSR: 8,
	OPASL: 8,
	OPASR: 8,
	OPLT: 7,
	OPLE: 7,
	OPGT: 7,
	OPGE: 7,
	OPEQ: 6,
	OPNEQ: 6,
	OPEQS: 6,
	OPNEQS: 6,
	OPAND: 5,
	OPXOR: 4,
	OPXNOR: 4,
	OPOR: 3,
	OPLAND: 2,
	OPLOR: 1,
};

Node
Parser.p_expr_core()
{
	Node ex[];
	OpType op[];
	OpType t;
	Node a;
	
	ex = [this.p_primary()];
	op = [];
	while(t = tok2op[this.peek().t], t !== undefined){
		while(op.length > 0 && prectab[op[0]] >= prectab[t]){
			a = ex.shift();
			ex[0] = new Node(Node{t: ASTBIN, op: op.shift(), n1: ex[0], n2: a, lineno: this.lineno});
		}
		this.lex();
		op.unshift(t);
		this.p_attributes();
		ex.unshift(this.p_primary());
	}
	while(op.length > 0){
		a = ex.shift();
		ex[0] = new Node(Node{t: ASTBIN, op: op.shift(), n1: ex[0], n2: a, lineno: this.lineno});
	}
	return ex[0];
}

Node
Parser.p_concat(Node p)
{
	Node l[];

	l = [p];
	while(this.got(",") !== null)
		l.push(this.p_expr());
	while(this.got(",") !== null);
	this.expect("}");
	return new Node(Node{t: ASTCONCAT, l: l, lineno: this.lineno});
}

Node
Parser.p_expr()
{
	Node p, q, r;
	
	if(this.got("{") !== null){
		p = this.p_expr();
		if(this.got("{") !== null){
			q = this.p_concat(this.p_expr());
			this.expect("}");
			return new Node(Node{t: ASTREPL, n1: q, n2: p, lineno: this.lineno});
		}else
			return this.p_concat(p);
	}else{
		p = this.p_expr_core();
		if(this.got("?") !== null){
			q = this.p_expr();
			this.expect(":");
			r = this.p_expr();
			return new Node(Node{t: ASTTERN, n1: p, n2: q, n3: r, lineno: this.lineno});
		}else
			return p;
	}
	
}

Node
Parser.p_assignment(Node delay)
{
	Node l, r;
	
	l = this.p_lvalue();
	this.expect("=");
	r = this.p_expr();
	return new Node(Node{t: ASTASSIGN, n1: l, n2: r, lineno: this.lineno, n3: delay});
}

void
Parser.p_param_decl(bool islocal)
{
	Token t;
	Type ty;
	bool sign;
	Node range[];
	Node r;
	Symbol l;
	
	if(t = this.gotany({"kw:integer": true, "kw:real": true, "kw:realtime": true, "kw:time": true}), t !== null)
		ty = {"kw:integer": inttype, "kw:real": realtype, "kw:realtime": realtype, "kw:time": timetype}[t.t];
	else{
		sign = this.got("kw:signed") !== null;
		if(this.peek().t == "["){
			range = this.p_range();
			ty = new Type(TYPBITV, sign, range[1], range[0], null);
		}else
			ty = new Type(TYPUNSZ, sign);
	}
	do{
		l = this.expect("id").sym;
		this.expect("=");
		r = this.p_expr();
		this.curmod.params.push(decl(this.lineno, this.scope, islocal ? SYMLPARAM : SYMPARAM, l, ty, r));
	}while(this.got(",") !== null && this.peek().t === "id");
}

Node
Parser.p_event_expr()[]
{
	Node n;
	Node l[];

	l = [];
	do{
		if(this.got("kw:posedge") !== null)
			n = new Node(Node{t: ASTPOSEDGE, n1: this.p_expr(), lineno: this.lineno});
		else if(this.got("kw:negedge") !== null)
			n = new Node(Node{t: ASTNEGEDGE, n1: this.p_expr(), lineno: this.lineno});
		else
			n = this.p_expr();
		l.push(n);
	}while(this.gotany({"kw:or": true, ",": true}) !== null);
	return l;
}

Node
Parser.p_event_control()
{
	Node n[];

	if(this.got("@*") !== null)
		return new Node(Node{t: ASTAT, l: null, lineno: this.lineno});
	this.expect("@");
	if(this.got("(") !== null){
		if(this.got("*") !== null)
			n = null;
		else
			n = this.p_event_expr();
		this.expect(")");
	}else
		n = [this.p_hier_identifier()];
	return new Node(Node{t: ASTAT, l: n, lineno: this.lineno});
}

Node
Parser.p_stat_assign()
{
	Node l, r, n, d;
	int lineno;
	Token t;
	bool nonblock;

	l = this.p_lvalue();
	lineno = this.lineno;
	nonblock = this.expectany({"=": true, "<=": true}).t == "<=";
	d = null;
	switch(t = this.peek(), t.t){
	case "@": case "@*": d = this.p_event_control(); break;
	case "#": d = this.p_delay(); break;
	case "kw:repeat":
		this.lex();
		this.expect("(");
		n = this.p_expr();
		this.expect(")");
		d = new Node(Node{t: ASTREPEAT, n1: n, n2: this.p_event_control(), lineno: this.lineno});
		break;
	}
	r = this.p_expr();
	this.expect(";");
	if(d !== null && d.t == ASTAT && d.l === null){
		d.l = [];
		nodedeps(r, d.l);
	}
	return new Node(Node{t: nonblock ? ASTDASS : ASTASS, n1: l, n2: r, n3: d, lineno: lineno});
}

Node
Parser.p_var_assign()
{	
	Node l, r;
	int lineno;

	l = this.p_lvalue();
	lineno = this.lineno;
	this.expect("=");
	r = this.p_expr();
	return new Node(Node{t: ASTASS, n1: l, n2: r, n3: null, lineno: lineno});
}

Node
Parser.p_case(string t)
{
	Node a, x[], y, l[];
	int lineno0, lineno1;

	lineno0 = this.lineno;
	this.expect("(");
	a = this.p_expr();
	this.expect(")");
	l = [];
	while(!this.goteof("kw:endcase")){
		lineno1 = this.lineno;
		if(this.got("kw:default") !== null){
			this.got(":");
			x = null;
			y = mkblock(this.p_stat());
		}else{
			x = [];
			do
				x.push(this.p_expr());
			while(this.got(",") !== null);
			this.expect(":");
			y = mkblock(this.p_stat());
		}
		l.push(new Node(Node{t: ASTCASIT, n1: y, l: x, lineno: lineno1}));
	}
	return new Node(Node{t: t=="kw:casez"?ASTCASEZ:t=="kw:casex"?ASTCASEX:ASTCASE, n1: a, l: l, lineno: lineno0});
}

void
Parser.recover()
{
	Token t;
	int n;
	int nc;
	
	n = 0;
	nc = 0;
	for(;;)
		switch(t = this.lex(), t.t){
		case "EOF": return;
		case ";":
			if(n <= 0 && nc <= 0)
				return;
			break;
		case "kw:end":
			if(--n <= 0)
				return;
			break;
		case "kw:endmodule":
			return;
		case "kw:begin": n++; break;
		case "kw:case": case "kw:casex": case "kw:casez": nc++; break;
		case "kw:endcase":
			if(--nc <= 0)
				return;
			break;
		}
}

Node
Parser.p_stat()[]
{
	Token t;
	Node a, b, c, d;
	int lineno;
	var e;
	Node l[];

	try{
		switch(t = this.peek(), t.t){
		case "id":
			return [this.p_stat_assign()];
		case "kw:begin":
			this.lex();
			l = [];
			while(this.goteof("kw:end") === null)
				l.push.apply(l, this.p_stat());
			return l;
		case "kw:if":
			this.lex();
			lineno = this.lineno;
			this.expect("(");
			a = this.p_expr();
			this.expect(")");
			b = mkblock(this.p_stat());
			if(this.got("kw:else") !== null)
				c = mkblock(this.p_stat());
			else
				c = null;
			return [new Node(Node{t: ASTIF, n1: a, n2: b, n3: c, lineno: lineno})];
		case "kw:forever":
			this.lex();
			a = mkblock(this.p_stat());
			return [new Node(Node{t: ASTFOREVER, n1: a, lineno: lineno})];
		case "kw:while":
			this.lex();
			lineno = this.lineno;
			this.expect("(");
			a = this.p_expr();
			this.expect(")");
			b = mkblock(this.p_stat());
			return [new Node(Node{t: ASTWHILE, n1: a, n2: b, lineno: lineno})];
		case "kw:repeat":
			this.lex();
			lineno = this.lineno;
			this.expect("(");
			a = this.p_expr();
			this.expect(")");
			b = mkblock(this.p_stat());
			return [new Node(Node{t: ASTREPEAT, n1: a, n2: b, lineno: lineno})];
		case "kw:for":
			this.lex();
			lineno = this.lineno;
			this.expect("(");
			a = this.p_var_assign();
			this.expect(";");
			b = this.p_expr();
			this.expect(";");
			c = this.p_var_assign();
			this.expect(")");
			d = mkblock(this.p_stat());
			return [new Node(Node{t: ASTFOR, n1: a, n2: b, n3: c, n4: d, lineno: lineno})];
		case "kw:case": case "kw:casex": case "kw:casez":
			this.lex();
			return [this.p_case(t.t)];
		case "@": case "@*": 
			a = this.p_event_control();
			l = this.p_stat();
			if(a.l === null){
				a.l = [];
				l.forEach(void(e) return nodedeps(e, a.l));
			}
			l.unshift(a);
			return l;
		case "#":
			a = this.p_delay();
			l = this.p_stat();
			l.unshift(a);
			return l;
		case ";":
			this.lex();
			return [];
		default:
			throw error(this.lineno, "unexpected " + (string)t.t + " in statement");
			return null;
		}
	}catch(e){
		if(e instanceof VError){
			this.recover();
			return [];
		}
		throw e;
	}
}

void
Parser.p_module_item_decl(string t)
{
	bool signrangeok, initok, delayok;
	bool sign;
	Node delay;
	Symbol s;
	Type bt, st;
	Node range[], mrange[];
	int saw;
	SymbolType symt;
	
	switch(t){
	case "kw:wire": symt = SYMWIRE; break;
	case "kw:genvar": symt = SYMGENVAR; break;
	case "kw:event": symt = SYMEVENT; break;
	default: symt = SYMREG; break;
	}
	signrangeok = t == "kw:wire" || t == "kw:reg";
	initok = t != "kw:event";
	delayok = t == "kw:wire";
	
	sign = this.got("kw:signed") !== null;
	if(sign && !signrangeok)
		error(this.lineno, "signed not allowed with " + t);
	range = this.p_range();
	if(range !== null && !signrangeok)
		error(this.lineno, "range not allowed with " + t);
	delay = this.p_delay();
	if(delay !== null && !delayok)
		error(this.lineno, "delay not allowed with " + t);
	switch(t){
	case "kw:wire": case "kw:reg":
		if(range === null)
			bt = new Type(TYPBIT, sign);
		else
			bt = new Type(TYPBITV, sign, range[1], range[0], null);
		break;
	case "kw:genvar": bt = sunsztype; break;
	case "kw:event": bt = eventtype; break;
	case "kw:integer": bt = inttype; break;
	case "kw:real": case "kw:realtime": bt = realtype; break;
	case "kw:time": bt = timetype; break;
	default: throw "shouldn't happen";
	}
	saw = 0;
	do{
		s = this.expect("id").sym;
		mrange = this.p_range();
		if(mrange !== null){
			st = new Type(TYPMEM, false, mrange[1], mrange[0], bt);
			saw |= 2;
		}else
			st = bt;
		s = decl(this.lineno, this.scope, symt, s, st, null);
		s.delay = delay;
		if(this.got("=") !== null){
			if(mrange !== null)
				error(this.lineno, "memories cannot have initialisers");
			s.def = this.p_expr();
			saw |= 1;
		}
	}while(this.got(",") !== null);
	if(saw == 3)
		error(this.lineno, "mixed declaration of memories and initialised signals not allowed");
	this.expect(";");
}

Node
Parser.p_module_inst(Token t)[]
{
	Symbol mname, iname;
	Node pl[], l[], r[], b;
	Symbol a;
	int lineno, lineno0;
	
	mname = t.sym;
	pl = [];
	r = [];
	if(this.got("#") !== null){
		this.expect("(");
		for(;;){
			lineno = this.lineno;
			if(this.got(".") !== null){
				a = this.expect("id").sym;
				this.expect("(");
				if(this.got(")") === null){
					b = this.p_expr();
					this.expect(")");
				}else
					b = null;
			}else{
				a = null;
				b = this.p_expr();
			}
			pl.push(new Node(Node{t: ASTMINSVAL, sym: a, n1: b, lineno: lineno}));
			if(this.got(")") !== null) break;
			this.expect(",");
			if(this.got(")") !== null)
				error(this.lineno, "extra comma at end of module parameter list");
		}
	}
	for(;;){
		lineno0 = this.lineno;
		iname = this.expect("id").sym;
		iname = decl(lineno0, this.scope, SYMINST, iname, null, null);
		l = [];
		this.expect("(");
		if(this.got(")") === null)
			for(;;){
				lineno = this.lineno;
				if(this.got(".") !== null){
					a = this.expect("id").sym;
					this.expect("(");
					if(this.got(")") === null){
						b = this.p_expr();
						this.expect(")");
					}else
						b = null;
				}else{
					a = null;
					b = this.p_expr();
				}
				l.push(new Node(Node{t: ASTMINSVAL, sym: a, n1: b, lineno: lineno}));
				if(this.got(")") !== null) break;
				this.expect(",");
				if(this.got(")") !== null)
					error(this.lineno, "extra comma at end of module port list");
			}
		r.push(new Node(Node{t: ASTMINST, sym: mname, symn: iname, l: l, pl: pl, lineno: lineno0}));
		if(this.got(";") !== null)
			return r;
		this.expect(",");
	}
}

Node
Parser.p_module_item()[]
{
	Token t;
	int l;
	Node n, r[], d;
	var e;
	
	try{
		r = [];
		switch(t = this.lex(), t.t){
		case "kw:assign":
			d = this.p_delay();
			do
				r.push(this.p_assignment(d));
			while(this.got(",") !== null);
			this.expect(";");
			break;
		case "kw:localparam": this.p_param_decl(false); this.expect(";"); break;
		case "kw:parameter": this.p_param_decl(true); this.expect(";"); break;
		case "kw:initial":
			l = this.lineno;
			r = this.p_stat();
			return [new Node(Node{t: ASTINITIAL, n1: mkblock(r), lineno: l})];
		case "kw:always":
			l = this.lineno;
			r = this.p_stat();
			return [new Node(Node{t: ASTALWAYS, n1: mkblock(r), lineno: l})];
		case "kw:wire": case "kw:reg": case "kw:integer":
		case "kw:real": case "kw:time": case "kw:realtime":
		case "kw:event": case "kw:genvar":
			this.p_module_item_decl(t.t);
			return [];
		case "id":
			return this.p_module_inst(t);
		default:
			error(this.lineno, "unexpected " + t.t);
		}
		return r;
	}catch(e){
		if(e instanceof VError){
			this.recover();
			return [];
		}
		throw e;
	}
}

Node
Parser.p_module()
{
	Symbol s;
	Node n;
	int lno;
	Node r[];
	var e;

	try{
		this.p_attributes();
		this.expect("kw:module");
		lno = this.lineno;
		s = this.expect("id").sym;
	}catch(e){
		if(e instanceof VError){
			this.recover();
			return null;
		}
		throw e;
	}
	s = decl(this.lineno, this.global, SYMMOD, s, null, null);
	s.ports = [];
	s.params = [];
	this.newscope(s);
	this.curmod = s;
	try{
		if(this.got("#") !== null){
			this.expect("(");
			do{
				this.expect("kw:parameter");
				this.p_param_decl(false);
			}while(this.goteof(")") === null);
		}
		if(this.got("(") !== null && this.got(")") === null){
			s.ports.push(this.p_port_declaration());
			while(this.got(",") !== null)
				s.ports.push(this.p_port_declaration());
			this.expect(")");
		}
		this.expect(";");
		r = [];
		while(this.goteof("kw:endmodule") === null)
			r.push.apply(r, this.p_module_item());
		n = new Node(Node{t: ASTMODULE, sym: s, l: r, lineno: lno});
		s.def = n;
	}catch(e){
		if(e instanceof VError){
			this.recover();
			return null;
		}
		throw e;
	}finally{
		this.curmod = null;
		this.scopeup();
	}
	return n;
}

void
parse()
{
	string s;
	Parser p;
	System sys;
	Node m[];
	var e, i;
	
	s = document.getElementById("code").value;
	localStorage.setItem("text", s);
	errors = [];
	p = new Parser(s);
	document.getElementById("wave").style.display = "none";
	document.getElementById("error").style.display = "";
	document.getElementById("error").innerHTML = "";
	try{
		m = [];
		while(!p.got("EOF"))
			m.push(p.p_module());
		if(errors.length != 0){
			for(i = 0; i < errors.length; i++)
				document.getElementById("error").innerHTML += (string)errors[i] + "\n";
			return;
		}
		try{
			for(i = 0; i < m.length; i++)
				m[i] = cfold(m[i], null);
		}catch(e){
			document.getElementById("error").innerHTML = e + "\n";
		}
		sys = new System();
		sys.compile(m[0], m[0].sym.name);
		sys.run();
		document.getElementById("wave").style.display = "";
		document.getElementById("error").style.display = "none";
		drawwave(sys);
	}catch(e){
		document.getElementById("error").innerHTML += e;
	}
}
