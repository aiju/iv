struct Bits {
	string s;
};

int
max(int a, int b)
{
	return a > b ? a : b;
}

string
mppad(string s, int n)
{
	if(s.length >= n) return s;
	return s + s.charAt(s.length - 1).repeat(n - s.length);
}

void
Bits(string r)
{
	int i;

	if(r.match("[^01xz]") !== null)
		throw "Bits called with invalid argument '" + r + "'";
	if(r == "")
		this.s = "0";
	else{
		i = r.length - 2;
		while(i >= 0 && r.charAt(i) == r.charAt(r.length - 1))
			i--;
		this.s = r.substr(0, i + 2);
	}
}

string
Bits.dig(int i)
{
	string t;
	
	t = this.s.charAt(i);
	if(t == "") return this.s.charAt(this.s.length - 1);
	return t;
}

bool
Bits.gotXZ(void)
{
	return this.s.match("[xz]") !== null;
}

Bits
mpadd(Bits a, Bits b)
{
	int i, m;
	string r, c;
	
	m = max(a.s.length, b.s.length) + 1;
	c = "0";
	r = "";
	for(i = 0; i < m; i++){
		switch(a.dig(i) + b.dig(i) + c){
		case "000": r += "0"; c = "0"; break;
		case "001": case "010": case "100": r += "1"; c = "0"; break;
		case "110": case "101": case "011": r += "0"; c = "1"; break;
		case "111": r += "1"; c = "1"; break;
		default:
			return new Bits("x");
		}
	}
	return new Bits(r);
}

Bits
mpsub(Bits a, Bits b)
{
	int i, m;
	string r, c;
	
	m = max(a.s.length, b.s.length) + 1;
	c = "1";
	r = "";
	for(i = 0; i < m; i++){
		switch(a.dig(i) + b.dig(i) + c){
		case "010": r += "0"; c = "0"; break;
		case "011": case "000": case "110": r += "1"; c = "0"; break;
		case "100": case "111": case "001": r += "0"; c = "1"; break;
		case "101": r += "1"; c = "1"; break;
		default:
			return new Bits("x");
		}
	}
	return new Bits(r);
}

Bits
mpmul(Bits a, Bits b)
{
	int i;
	Bits r;
	
	if(a.gotXZ() || b.gotXZ())
		return new Bits("x");
	r = new Bits("");
	for(i = 0; i < b.s.length - 1; i++)
		if(b.dig(i) == "1")
			r = mpadd(r, new Bits("0".repeat(i) + a.s));
	if(b.dig(i) == "1")
		r = mpsub(r, new Bits("0".repeat(i) + a.s));
	return r;
}

Bits
Bits.trunc(int n)
{
	return new Bits(this.s.substr(0, n) + "0");
}

Bits
Bits.xtend(int n)
{
	return new Bits(this.s.substr(0, n));
}

int
Bits.toInt()
{
	int i, r;
	
	r = -parseInt(this.s.charAt(this.s.length - 1));
	for(i = this.s.length - 2; i >= 0; i--)
		r = r * 2 + parseInt(this.s.charAt(i));
	return r;
}
